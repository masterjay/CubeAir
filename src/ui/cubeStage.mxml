<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:local="*"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="500" height="600" creationComplete="view1_creationCompleteHandler(event)" xmlns:ui="ui.*" xmlns:monster="ui.monster.*" xmlns:sound="ui.sound.*">
	<fx:Script>
		<![CDATA[
			import base.TiCommonEventDispatcher;
			import base.TiConvertValueToArray;
			import base.TiCube;
			import base.TiDisableTextField;
			
			import caurina.transitions.Tweener;
			
			import event.TiBattleEvent;
			import event.TiCubeEvent;
			
			import handler.TiMusicConfig;
			import handler.TiVoiceCollector;
			import handler.cubeRemoveHandler;
			
			import mx.events.FlexEvent;
			import mx.utils.OnDemandEventDispatcher;
			
			import org.osmf.events.TimeEvent;
			
			import ui.cube.BlueCube;
			import ui.cube.GreenCube;
			import ui.cube.PinkCube;
			import ui.cube.RedCube;
			import ui.cube.YellowCube;
			import ui.monster.MonsterCo;
			import ui.monster.TiMonsterConfig;
			
			import util.collection.TiHashMap;
			
			protected function view1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				m_fallTime.addEventListener(TimerEvent.TIMER_COMPLETE,fnFallAnimationEnd);
				stageGp.addEventListener(MouseEvent.MOUSE_MOVE,fnMouseMoveEvent);
				mcBattle.addEventListener(TiBattleEvent.HOST_DIE_FINISH_EVENT,fnHostDieHandler);
				mcBattle.addEventListener(TiBattleEvent.BOSS_STAGE,fnBossStagehandler);
				mcCountDown.mc_count_down.gotoAndStop(1);
				mcCountDown.mc_count_down.visible=false;
				mcCountDown.mc_cycle.gotoAndStop(1);
				mcGameRestart.visible=false;
				mcGameSucess.visible =false;
				mcStage.evaluation.visible=false;
				mcStage.lightening.visible = false;
				mcStage.total_plus.visible=false;
				TiDisableTextField.fnSetButtonAndDisableAllTextField(mcGameRestart.btn_restart);
				mcGameRestart.btn_restart.addEventListener(MouseEvent.CLICK,fnRestartGame);
				TiDisableTextField.fnSetButtonAndDisableAllTextField(mcGameSucess.btn_restart);
				mcGameSucess.btn_restart.addEventListener(MouseEvent.CLICK,fnRestartGame);
				mcBattle.addEventListener(TiBattleEvent.HOST_DIE_FINISH_EVENT,fnGameOver);
				mcGameTime.ani_time.gotoAndStop(1);
				mcBattle.addEventListener(TiBattleEvent.SUCCESS_EVENT,fnSucessHandler);
			}
			private var m_cubeHandler:cubeRemoveHandler =new cubeRemoveHandler();
			public var m_arCanvas:Array = new Array();
			private var m_cube:TiCube
			
			
			public var m_bSelectedCube:Boolean =false;
			public var m_SelectedCuebe:TiCube
			private var m_fallTime:Timer =new Timer(100,1) 
			private var m_arFallInitCount:Array =new Array();
			private var m_nFallCount:int=0;	
			private var m_nFallCount2:int=0;	
			private var m_nBreakBatch:int=0;
			private var m_arRemoveBatch:Array =new Array();
			public var m_bEnableMouseUpHandler:Boolean=false;
			private var m_nCombo:int=0
			private var m_nScore:int = 0;	
			private var m_nTotal:int = 0;	
			private var m_tGameTimer:Timer =new Timer(5000,1)
				
			public function fnInit():void
			{
				var index:int = 0;
				for(var i:int =0 ;i< TiStageConst.COL_MAX ;i ++)
				{
					for(var j:int = 0 ;j< TiStageConst.ROW_MAX;j++)
					{
						m_cube = fnCreatedCube();
						m_cube.m_cubeIndex = index
						TiStageConst.m_cubeHashMap.put(index,m_cube);
						index++
					}
				}
				m_cubeHandler.addEventListener(TiCubeEvent.CUBE_REMOVE_INIT_MARK_COMPLETE,fnAcceptRemoveArrayInitStageCube);
				m_cubeHandler.fnJudgeCube();
				fnInitScore();
			}
			
			private function fnCreatedCube():TiCube
			{
				var ranColor:int = Math.round(Math.random()*4);
				var cube:TiCube 
				switch(ranColor)
				{
					case 0: cube = new RedCube();
						break;
					case 1: cube = new BlueCube();
						break;
					case 2: cube = new YellowCube();
						break;
					case 3: cube = new GreenCube();
						break;
					case 4: cube = new PinkCube();
						break;
				}
				return  cube;
			}
			
			private function fnAcceptRemoveArrayInitStageCube(e:TiCubeEvent):void
			{
				var arCollection:Array = e.m_arRemove
				if(arCollection.length==0)
				{
					m_bEnableMouseUpHandler =true;
					m_cubeHandler.m_bInitStage = false
					for(var k:int = 0; k < TiStageConst.m_cubeHashMap.size() ; k++)
					{
						var cube:TiCube = TiStageConst.m_cubeHashMap.getValue(k)
						var mc:MovieClip = mcStage["cube"+ (k + 1)]
						mc.visible =false
						cube.x = mc.x + mcStage.x
						cube.y = mc.y + mcStage.y
						cube.width = mc.width
						cube.height = mc.height;	
						cube.m_cubeIndex = k
						cube.addEventListener(MouseEvent.MOUSE_DOWN,fnCubeMouseDownHandler);
						stageGp.addElement(cube);
					}
				
					return;
				}
				for(var i:int = 0; i< arCollection.length ;i++)
				{
					var ar:Array = arCollection[i];
					for(var j:int = 0; j<ar.length;j++)
					{
						var removeCube:TiCube = ar[j];
						var newCube:TiCube = fnCreatedCube();
						newCube.m_cubeIndex = removeCube.m_cubeIndex
						TiStageConst.m_cubeHashMap.put(removeCube.m_cubeIndex,newCube)
					}
				}
				m_cubeHandler.fnJudgeCube();
			}
			
			private function fnCubeMouseDownHandler(e:MouseEvent):void
			{ trace("mouse down")
				var ev:TiCubeEvent =new TiCubeEvent(TiCubeEvent.CUBE_DOWN_EVENT)
				ev.m_cube = e.currentTarget as TiCube
				dispatchEvent(ev);	
			}
			
			private function fnMouseMoveEvent(e:MouseEvent):void
			{
				if(!m_bSelectedCube)
				{
					return;	
				}
				var ev:TiCubeEvent =new TiCubeEvent(TiCubeEvent.CUBE_MOVE_EVENT)
				var cube:TiCube = fnGetMouseOverCube();	
			 	ev.m_po.x = e.stageX - (cube.width/2)
				ev.m_po.y = e.stageY - (cube.height/2) 
					
				dispatchEvent(ev);	
				
			}
			
			public function fnGetMouseClickCube():TiCube
			{
				var cube:TiCube
				for(var i:int = 0;i<TiStageConst.m_cubeHashMap.size();i++)
				{
					cube = TiStageConst.m_cubeHashMap.getValue(i);
					if(cube.m_MouseDown)
					{
						break;
					}
				}
				trace("cube index"+cube.m_cubeIndex)
				return cube;
			}
			public function fnGetMouseOverCube():TiCube
			{
			
				var cube:TiCube
				var rowIndex:int=0
				var colIndex:int = 0
				var bFlag:Boolean =false	
				for(var i:int = 0;i<TiStageConst.m_cubeHashMap.size();i++)
				{
					cube = TiStageConst.m_cubeHashMap.getValue(i);
					if(cube.m_MouseOver)
					{
						bFlag =true;
						break;
					}
				}
				if(bFlag)
				{
					return cube
				}
				else
				{
					cube = m_SelectedCuebe
				}
			return cube;
				
			}
			
			public function fnJudgeCube():void
			{
				
				m_cubeHandler.addEventListener(TiCubeEvent.CUBE_REMOVE_MARK_COMPLETE,fnAcceptRemoveArray);
				m_cubeHandler.fnJudgeCube();
				
			}
			
			private function fnAcceptRemoveArray(e:TiCubeEvent):void
			{
				if(e.m_arRemove.length==0)
				{
				//	m_bEnableMouseUpHandler =true;
					if(m_nCombo == 0)
					{
						mcBattle.fnMonsterAttactCountDownMinus();
					}
					if(m_nCombo>0)
					{
						mcStage.lightening.visible = true;
						mcStage.lightening.gotoAndPlay(1);
						TiVoiceCollector.fnPlayonepoint09();
						mcStage.lightening.addEventListener(Event.ENTER_FRAME,fnLighteningEnterFram);
						
					}
					else
					{
						m_nCombo = 0;
						m_nScore = 0;
					}
					return;
				}
				m_arRemoveBatch = e.m_arRemove
				m_nBreakBatch=0
				m_nFallCount=0
				m_nFallCount2=0;
				fnRemoveCube();
			}
			
			private function fnLighteningEnterFram(e:Event):void
			{
				if(mcStage.lightening.currentFrame == mcStage.lightening.totalFrames)
				{
					mcStage.lightening.removeEventListener(Event.ENTER_FRAME,fnLighteningEnterFram);
					mcStage.lightening.visible = false;
					mcStage.total_plus.visible = true;
					var nPlus:int = TiMonsterConfig.fnAttactDamage(m_nScore , m_nCombo);
					var i:int = 0 ;
					var arPlus:Array = TiConvertValueToArray.fnConvertValueToArray(nPlus);
					fnAttactMonster(nPlus);
					for( i = 0 ;; i++)
					{
						if(mcStage.total_plus.total_plus["score"+ (i+1)])
						{
							if(i<arPlus.length)
							{
								mcStage.total_plus.total_plus["score"+ (i+1)].gotoAndStop(int(arPlus[i])+1);	
								mcStage.total_plus.total_plus["score"+ (i+1)].visible = true;
							}
							else
							{
								mcStage.total_plus.total_plus["score"+ (i+1)].visible = false;
							}
						}
						else
						{
							break;
						}
					}
					mcStage.total_plus.gotoAndPlay(1);
					m_nTotal +=nPlus 
					var ar:Array = TiConvertValueToArray.fnConvertValueToArray(m_nTotal);
					ar.reverse();
					for(i = 0 ;i< ar.length ; i++)
					{
						mcStage.Total_x["Total"+ (i+1)].gotoAndStop(int(ar[i])+1);
					}
					m_nScore = 0;
					m_nCombo = 0;
					for(i = 0 ;i< 5 ; i++)
					{
						mcStage.Score_x["score"+ (i+1)].gotoAndStop(1);
					}
					for(i = 0 ;i< 2 ; i++)
					{
						mcStage.Combo_x["combo"+ (i+1)].gotoAndStop(1);
					}
					
					
				}
			}
			
			private function fnAttactMonster(nValue:int):void
			{
				//mcBettle.addEventListener(TiMonsterEvent.MONSTER_SUFFER_FINISH_EVENT,fnMonsterSufferFinishHandler);
				mcBattle.fnAttackMonster(nValue);
			}
			
			private function fnMonsterSufferFinishHandler(e:Event):void
			{
				//fnMonsterAttact();
				//mcMonster.fn
			}
			
			private function fnRemoveCube():void
			{
				if(m_nBreakBatch < m_arRemoveBatch.length)
				{
					var ar:Array = m_arRemoveBatch[m_arRemoveBatch.length-1 - m_nBreakBatch];
					if(m_arRemoveBatch.length-1 - m_nBreakBatch == 0)
					{
						fnRemoveBybatch(ar,true)
					}
					else
					{
						fnRemoveBybatch(ar,false)
					}
					TiVoiceCollector.fnPlayCubeBreak();
					fnCountFraction(ar)
				}
			}
			
			private function fnRemoveBybatch(ar:Array,bLast:Boolean):void
			{
				for(var i :int = 0 ; i < ar.length ; i++) 
				{
					var cube:TiCube = ar[i]
					if(cube.m_cubeColor!= TiCube.INVISIBLE)
					{
						if( i == ar.length-1)
						{
							if(bLast)
							{
								cube.m_bLastCubeInArrayCollection=true;
							}
							cube.m_bLastCubeInArray=true;
							
						}trace("fnPlayBreakAni")
						cube.addEventListener(TiCubeEvent.CUBE_BREAK_END_EVENT,fnBreakEndhandlerByBatch);	
						cube.fnPlayBreakAni()
						
					}
				}
				m_nBreakBatch++
				m_nCombo++  	
				fnComboToText();
			}
			
			private function fnBreakEndhandlerByBatch(e:TiCubeEvent):void
			{
				var cubeInvisible:InvisibelCube 
				var cube:TiCube = e.currentTarget as TiCube
				cubeInvisible =new InvisibelCube();
				cubeInvisible.x = cube.x
				cubeInvisible.y = cube.y
				cubeInvisible.m_cubeIndex = cube.m_cubeIndex
				stageGp.removeElementAt(cube.m_cubeIndex);
				stageGp.addElementAt(cubeInvisible,cubeInvisible.m_cubeIndex);
				TiStageConst.m_cubeHashMap.put(cubeInvisible.m_cubeIndex,cubeInvisible);
				if(cube.m_bLastCubeInArrayCollection)
				{
					fnCubeFallBeforeAni();
				}
				else
				{
					if(cube.m_bLastCubeInArray)
					{
						fnRemoveCube();
					}
				}
			}
		 	/* private function fnCubeFallJudge():void
			{
				var nMaxSize:int = m_cubeHashMap.size() - ROW_MAX
				for(var i:int = nMaxSize-1; i >=0 ; i--)
				{
					var cube:TiCube = m_cubeHashMap.getValue(i);
					var cubeNextLayer:TiCube = m_cubeHashMap.getValue(i+ROW_MAX);
					if(cubeNextLayer.m_cubeColor == TiCube.INVISIBLE || cubeNextLayer.m_bCubeFall == true)
					{
						cube.m_bCubeFall = true;
					}
				}
			//	fnCubeFallBeforeAni();
			}  */
			
		/* 	private function fnBreakEndhandlerLastCube(e:TiCubeEvent):void
			{
				var cubeInvisible:InvisibelCube 
				var cube:TiCube = e.currentTarget as TiCube
				cubeInvisible =new InvisibelCube();
				cubeInvisible.x = cube.x
				cubeInvisible.y = cube.y
				cubeInvisible.m_cubeIndex = cube.m_cubeIndex
				stageGp.removeElementAt(cube.m_cubeIndex);
				stageGp.addElementAt(cubeInvisible,cubeInvisible.m_cubeIndex);
				TiStageConst.m_cubeHashMap.put(cubeInvisible.m_cubeIndex,cubeInvisible);
				if(cube.m_bLastCubeInArray)
				{
					fnCubeFallBeforeAni();
				}
				
			} */
			public function fnCubeFallBeforeAni():void
			{
				var nMaxSize:int = TiStageConst.m_cubeHashMap.size() - TiStageConst.COL_MAX
				var moveSize:int = 0;	
				var bDoAfterAnimationFunction:Boolean = true;
				for(var i:int = nMaxSize-1; i >=0 ; i--)
				{
					moveSize = 0
					var cube:TiCube = TiStageConst.m_cubeHashMap.getValue(i);
					var cubeNextLayerIndex:int = cube.m_cubeIndex + (moveSize+1) * TiStageConst.COL_MAX
					while(cubeNextLayerIndex < TiStageConst.m_cubeHashMap.size())
					{
						var cubeNextLayer:TiCube = TiStageConst.m_cubeHashMap.getValue(cubeNextLayerIndex);
						if( cube.m_cubeColor != TiCube.INVISIBLE && cubeNextLayer.m_cubeColor == TiCube.INVISIBLE)
						{
							moveSize++
							cubeNextLayerIndex = cube.m_cubeIndex + (moveSize+1) * TiStageConst.COL_MAX
						}
						else
						{
							break;
						}
					}
					if(moveSize > 0)
					{
						bDoAfterAnimationFunction = false;
						m_nFallCount++;
						fnDoCubeFallAnimation(cube,moveSize);
					}
				}
				if(bDoAfterAnimationFunction)
				{
					fnFallAnimationEnd();
				}
			//	m_fallTime.start();
			}
				
			private function fnDoCubeFallAnimation(cube:TiCube,nFallSize:int):void
			{
				var index:int = cube.m_cubeIndex + nFallSize * TiStageConst.COL_MAX
				var fallCube:TiCube = TiStageConst.m_cubeHashMap.getValue(index);
				
				var NewCubeFall:TiCube = fnCreatePhoxyCube(cube.m_cubeColor);
				NewCubeFall.x = cube.x
				NewCubeFall.y = cube.y	
				fallGp.addElement(NewCubeFall);
				Tweener.addTween(NewCubeFall, {x:fallCube.x, y:fallCube.y,scaleX:1,scaleY:1,time:0.3,onComplete:handleSwapEnd});
				var obj:Object =new Object();
				obj.x = fallCube.x
				obj.y = fallCube.y;	
				obj.m_cubeIndex = fallCube.m_cubeIndex
				
				
				fallCube.x = cube.x
				fallCube.y = cube.y
				fallCube.m_cubeIndex = cube.m_cubeIndex
				cube.x = obj.x
				cube.y = obj.y
				cube.m_cubeIndex = obj.m_cubeIndex
				cube.visible = false;
				stageGp.addElementAt(cube,cube.m_cubeIndex);
				stageGp.addElementAt(fallCube,fallCube.m_cubeIndex);
				
				TiStageConst.m_cubeHashMap.put(fallCube.m_cubeIndex,fallCube);
				TiStageConst.m_cubeHashMap.put(cube.m_cubeIndex,cube);
			}
			
			private function handleSwapEnd():void
			{
				m_nFallCount2++
				if(m_nFallCount == m_nFallCount2 )
				{
					fnFallAnimationEnd();
				}
			}
			
			
			public function fnCreatePhoxyCube(color:String):TiCube
			{
				var cube:TiCube  =new InvisibelCube();
					//return cube
				switch(color)
				{
					case TiCube.BLUE:
						cube =new BlueCube();
						break;
					case TiCube.GREEN:
						cube =new GreenCube();
						break;
					case TiCube.YELLOW:
						cube =new YellowCube();
						break;
					case TiCube.PINK:
						cube =new PinkCube();
						break;
					case TiCube.RED:
						cube =new RedCube();
						break;
				}
				return cube; 
			}
			
			private function fnFallAnimationEnd(e:Event =null):void
			{
				fallGp.removeAllElements();
				
				for(var i:int=0 ; i < TiStageConst.m_cubeHashMap.size() ; i++)
				{
					var cube:TiCube = TiStageConst.m_cubeHashMap.getValue(i);
					cube.visible = true;
					cube.m_cubeIndex = i
					cube.fnInit();
				}
				fnFAfterFallAnimation();
			}
			
			private function fnFAfterFallAnimation():void
			{
				m_arFallInitCount =new Array();
				for(var i:int = TiStageConst.m_cubeHashMap.size() -1; i >=0 ; i--)
				{
				 	var cubeInvisible:TiCube = TiStageConst.m_cubeHashMap.getValue(i);
					if(cubeInvisible.m_cubeColor == TiCube.INVISIBLE)
					{
						var cubeNew:TiCube = fnCreatedCube();
						cubeNew.x = cubeInvisible.x
						cubeNew.y = cubeInvisible.y
						cubeNew.m_cubeIndex = cubeInvisible.m_cubeIndex	
						cubeNew.visible =false;
						m_nFallCount++
						var cubeFall:TiCube = fnCreatePhoxyCube(cubeNew.m_cubeColor);
						var FallInitIndex:int = cubeNew.m_cubeIndex % TiStageConst.COL_MAX
						m_arFallInitCount.push(FallInitIndex);
						var FallInitBackIndex:int = cubeNew.m_cubeIndex / TiStageConst.COL_MAX	
						var FallInitIdexCube:TiCube = TiStageConst.m_cubeHashMap.getValue(FallInitIndex);
						cubeFall.x = FallInitIdexCube.x 
						cubeFall.y = FallInitIdexCube.y - ((fnGetFallInitCOunt(FallInitIndex)+1) * 46.8);
						fallGp.addElement(cubeFall);
						cubFallMove.target = cubeFall
						cubFallMove.yTo = cubeInvisible.y 	
						//cubFallMove.play();
						
						Tweener.addTween(cubeFall, {x:cubeNew.x, y:cubeNew.y,scaleX:1,scaleY:1,time:0.5});
						stageGp.removeElementAt(cubeInvisible.m_cubeIndex);
						stageGp.addElementAt(cubeNew,cubeNew.m_cubeIndex);
						TiStageConst.m_cubeHashMap.put(cubeNew.m_cubeIndex,cubeNew);
					}
				}
				var t:Timer=new Timer(500,1)
					t.addEventListener(TimerEvent.TIMER_COMPLETE,fnHandleSwapEndAfterFallAnimation);
					t.start()	
			}
			
			private function fnHandleSwapEndAfterFallAnimation(e:Event):void
			{
				fallGp.removeAllElements();
				stageGp.removeAllElements();
				for(var i:int=0 ; i < TiStageConst.m_cubeHashMap.size() ; i++)
				{
					var cube:TiCube = TiStageConst.m_cubeHashMap.getValue(i);
					cube.visible = true;
					cube.m_cubeIndex = i
					cube.fnInit();
					cube.addEventListener(MouseEvent.MOUSE_DOWN,fnCubeMouseDownHandler);
					stageGp.addElement(cube);
				}
				fnJudgeCube()
			}
			
			private function fnGetFallInitCOunt(init:int):int
			{
				var count:int =0;
				for(var i:int=0 ; i <m_arFallInitCount.length;i++)
				{
					 if(init == m_arFallInitCount[i])
					 {
						 count++
					 }
				}
				return  count
			}
			
			private function fnCountFraction(ar:Array):void
			{
				var cube:TiCube = ar[int(ar.length/2)]
				var color:String = cube.m_cubeColor
				var colorFraction:int	
				var po:Point =new Point(cube.x,cube.y);
				switch(color)
				{
					case TiCube.BLUE:
						colorFraction = TiStageConst.BLUE_FRACTION
						break;
					case TiCube.PINK:
						colorFraction = TiStageConst.PINK_FRACTION
						break;
					case TiCube.YELLOW:
						colorFraction = TiStageConst.YELLOW_FRACTION
						break;
					case TiCube.GREEN:
						colorFraction = TiStageConst.GREEN_FRACTION
						break;
					case TiCube.RED:
						colorFraction = TiStageConst.RED_FRACTION
						break;
				}
				var plus:int = colorFraction*ar.length 
				if(ar.length > 3 )
				{
					plus = plus + (plus * (ar.length -3) *0.17)
				}
				fnPluasAni(plus,po,color)
				m_nScore +=plus
				
				var ar:Array = TiConvertValueToArray.fnConvertValueToArray(m_nScore);
				ar.reverse();
				for(var j:int = 0 ;j< ar.length ; j++)
				{
					mcStage.Score_x["score"+ (j+1)].gotoAndStop(int(ar[j])+1);
				}
			}
			
			
			private function fnComboToText():void
			{
				fnSetComboAni();
				if(m_nCombo < 10)
				{
					mcStage.Combo_x.combo1.gotoAndStop(m_nCombo+1)
				}
				else
				{
					
					var digit:int= m_nCombo%10
					mcStage.Combo_x.combo1.gotoAndStop(m_nCombo+1)
					var digit_ten:int = m_nCombo/10
					mcStage.Combo_x.combo2.gotoAndStop(digit_ten+1)	
				}
			}
			
			private function fnSetComboAni():void
			{
				if(m_nCombo == 1)
				{
					mcStage.evaluation.visible =false;
				}
				else
				{
					mcStage.evaluation.visible=true;
					mcStage.evaluation.addEventListener(Event.ENTER_FRAME,fnEvaluationEnterFram);
					
					if(m_nCombo == 2)
					{
						mcStage.evaluation.evaluationAni.gotoAndStop(1)
					}
					else if(m_nCombo == 3)
					{
						mcStage.evaluation.evaluationAni.gotoAndStop(2)	
					}
					else if(m_nCombo == 4)
					{
						mcStage.evaluation.evaluationAni.gotoAndStop(3)	
					}
					else if(m_nCombo == 5)
					{
						mcStage.evaluation.evaluationAni.gotoAndStop(4)	
					}
					else 
					{
						mcStage.evaluation.evaluationAni.gotoAndStop(5)		
					}
					mcStage.evaluation.gotoAndPlay(1)
				}
				
			}
			
			private function fnEvaluationEnterFram(e:Event):void
			{
				if(mcStage.evaluation.currentFrame == mcStage.evaluation.totalFrames)
				{
					mcStage.evaluation.removeEventListener(Event.ENTER_FRAME,fnEvaluationEnterFram);
					mcStage.evaluation.visible=false;
				}
			}
			
			
			public function fnGameStartCountDown():void
			{
				soundPanel.fnSelectMusic(TiMusicConfig.SOUND_INGAME)
				mcCountDown.visible = true
				mcCountDown.mc_count_down.visible = true
				mcCountDown.mc_cycle.visible=true;
				mcCountDown.mc_count_down.gotoAndPlay(2);
				mcCountDown.mc_cycle.gotoAndPlay(2);
				mcCountDown.mc_count_down.addEventListener(Event.ENTER_FRAME,fnEnTerFramHandler);
				fnGameTimeUiReset();
			}
			
			private function fnEnTerFramHandler(e:Event):void
			{
				var mc:MovieClip = e.currentTarget as MovieClip
					if(mc.currentFrame == mc.totalFrames)
					{
						mcCountDown.visible = false;
						mcCountDown.mc_count_down.gotoAndStop(1);
						mcCountDown.mc_cycle.gotoAndStop(1);
						mcCountDown.mc_count_down.removeEventListener(Event.ENTER_FRAME,fnEnTerFramHandler);
						mcBattle.fnShowToStage();
					}
			}
			
			private function fnPluasAni(nPlus:int,po:Point,color:String):void
			{
				var ar:Array = TiConvertValueToArray.fnConvertValueToArray(nPlus)
				var mcPlus:CubePlus =new CubePlus();
				mcPlusGp.addElement(mcPlus)
				mcPlus.addEventListener(TiCubeEvent.CUBE_PLUS_COMPLETE,fnCubePlusHandler);
				mcPlus.fnGetUpAni(color,ar);
				mcPlus.x = po.x
				mcPlus.y = po.y	
				
				
			}
			private function fnCubePlusHandler(e:TiCubeEvent):void
			{
				//mcPlusGp.removeAllElements();
			}
			
			
			public function fnGetColorTransform(strColor:String):ColorTransform
			{
				var nValue:Number 
				switch(strColor)
				{
					case strColor:TiCube.BLUE 
						nValue = TiStageConst.COLOR1
						break;
					case strColor:TiCube.GREEN 
						nValue = TiStageConst.COLOR2
						break
					case strColor:TiCube.PINK 
						nValue = TiStageConst.COLOR3
						break
					case strColor:TiCube.RED 
						nValue = TiStageConst.COLOR4
						break
					case strColor:TiCube.YELLOW 
						nValue = TiStageConst.COLOR5
						break
				}
				var color:ColorTransform = new ColorTransform(0,0,0,1,(nValue & 0xFF0000)>>16
					,(nValue & 0x00FF00)>>8,nValue & 0x0000FF,0);
				return color;
			}
			
			private function fnHostDieHandler(e:TiBattleEvent):void
			{
				mcGameRestart.visible=true;
			}
			
			private function fnRestartGame(e:MouseEvent):void
			{
				TiMonsterConfig.m_nNextPoint=0;
				mcBattle.fnClear()
				TiStageConst.m_cubeHashMap.clear()
				stageGp.removeAllElements()
				fallGp.removeAllElements();
				mcPlusGp.removeAllElements();
				m_cubeHandler.m_bInitStage =true
				mcGameRestart.visible=false;
				mcGameSucess.visible=false;
				fnInit();
				fnGameStartCountDown();
			}
			
			private function fnInitScore():void
			{
				m_nCombo = 0;
				m_nScore = 0;
				m_nTotal = 0;
				for(var i:int = 0 ;; i++)
				{
					if(mcStage.Total_x["Total"+ (i+1)])
					{
						mcStage.Total_x["Total"+ (i+1)].gotoAndStop(0);
					}
					else
					{
						break;
					}
				}
			}
			
			private function fnGameOver(e:TiBattleEvent):void
			{
				var ev:TiBattleEvent =new TiBattleEvent(TiBattleEvent.HOST_DIE_FINISH_EVENT)
					dispatchEvent(ev);
					soundPanel.fnSelectMusic(TiMusicConfig.SOUND_GAMEOVER);
			}
			
			public function fnGameTimeUiReset():void
			{
				mcGameTime.ani_time.gotoAndStop(1);
			}
			
			public function fnGameTimeStop():void
			{
				mcGameTime.ani_time.gotoAndStop(mcGameTime.ani_time.currentFrame);
			}
			
			public function fnGameTimeUiStart():void
			{
				if(mcGameTime.ani_time.currentFrame == 1)
				{
					mcGameTime.ani_time.addEventListener(Event.ENTER_FRAME,fnGameTimeEnterFrame)
					mcGameTime.ani_time.gotoAndPlay(1);
				}
			}
			
			private function fnGameTimeEnterFrame(e:Event):void
			{
				if(mcGameTime.ani_time.currentFrame == mcGameTime.ani_time.totalFrames)
				{
					mcGameTime.ani_time.removeEventListener(Event.ENTER_FRAME,fnGameTimeEnterFrame)
					fnMouseUpHandler();
				}
			}
			
			private function fnMouseUpHandler():void
			{
				var ev:MouseEvent =new MouseEvent(MouseEvent.MOUSE_UP)
					dispatchEvent(ev);
			}
			
			private function fnSucessHandler(e:TiBattleEvent):void
			{
				mcGameSucess.visible =true;
				TiDisableTextField.fnSetText(mcGameSucess.txt_score,"Your Score: " + m_nTotal);
				soundPanel.fnSelectMusic(TiMusicConfig.SOUND_GAMEOVER);
			}
			
			private function fnBossStagehandler(e:TiBattleEvent):void
			{
				soundPanel.fnSelectMusic(TiMusicConfig.SOUND_BOSS);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:Move id="cubFallMove" duration="500"/>
	</fx:Declarations>
	<local:cube_scene id="mcStage"/>
	<s:Group id="stageGp"/>
	<s:Group id="fallGp" x="0" y="0"/>
	<local:game_time id="mcGameTime" x="0" y="0"/>
	<local:mc_countdown id="mcCountDown" visible="false" />
	<s:Group id="mcPlusGp"/>
	<ui:BettleStage id="mcBattle" x="0" y="0"/>
	<local:restart_page id="mcGameRestart" x="0" y="0"/>
	<local:sucuess_page id="mcGameSucess" x="0" y="0"/>
	<sound:SoundControl id="soundPanel"/>
</s:Group>
